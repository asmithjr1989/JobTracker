{"ast":null,"code":"import Axios from \"axios\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return Axios.get('http://localhost:8080/baiscuth', {\n      headers: {\n        authorization: basicAuthHeader\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    let basicAuthHeader;\n  }\n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password); // console.log(\"registerSuccessfulLogin\");\n\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = \"asmithjr\";\n    let password = \"dummy\";\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    Axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/tony/Desktop/JobTracker/front/job-tracker/src/components/job/AuthenticationService.js"],"names":["Axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","basicAuthHeader","createBasicAuthToken","registerSuccessfulLogin","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAE1BC,EAAAA,iCAAiC,CAACC,QAAD,EAAUC,QAAV,EAAmB;AACnD,WAAOJ,KAAK,CAACK,GAAN,CAAU,gCAAV,EAA4C;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAEC;AAAhB;AAAV,KAA5C,CAAP;AACA;;AAEDC,EAAAA,oBAAoB,CAACN,QAAD,EAAUC,QAAV,EAAmB;AACnC,QAAII,eAAJ;AACH;;AAGDE,EAAAA,uBAAuB,CAACP,QAAD,EAAWC,QAAX,EAAqB;AAC1C,QAAII,eAAe,GAAG,WAAWG,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC,CAD0C,CAG3C;;AACCS,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4BP,eAA5B;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACPH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACD;;AAEDJ,EAAAA,sBAAsB,GAAG;AACvB,QAAIZ,QAAQ,GAAG,UAAf;AACA,QAAIC,QAAQ,GAAG,OAAf;AAEA,QAAII,eAAe,GAAG,WAAWG,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAJ,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACzBO,QAAAA,MAAM,CAACnB,OAAP,CAAeC,aAAf,GAA+BC,eAA/B;AACD;;AACD,aAAOiB,MAAP;AACD,KALD;AAMD;;AA/CyB;;AAkD5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import Axios from \"axios\";\n\nclass AuthenticationService {\n\n  executeBasicAuthenticationService(username,password){\n   return Axios.get('http://localhost:8080/baiscuth', {headers: {authorization: basicAuthHeader }})   \n  }\n\n  createBasicAuthToken(username,password){\n      let basicAuthHeader\n  }\n    \n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n   // console.log(\"registerSuccessfulLogin\");\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = \"asmithjr\";\n    let password = \"dummy\";\n\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n    Axios.interceptors.request.use((config) => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n      return config;\n    });\n  }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}