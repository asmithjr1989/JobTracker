{"ast":null,"code":"import Axios from \"axios\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return Axios.get(\"http://localhost:8080/basicauth\", {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return Axios.get(\"http://localhost:8080/basicauth\", {});\n  }\n\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    // let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    // console.log(\"registerSuccessfulLogin\");\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return \"Bearer \" + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'asmithjr';\n    let password = 'icandoit';\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    Axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/tony/Desktop/JobTracker/front/job-tracker/src/components/job/AuthenticationService.js"],"names":["Axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAG1BC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACpD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAClDC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AADyC,KAA7C,CAAP;AAGD;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C,EAA7C,CAAP;AAGD;;AAEDG,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACvC,WAAO,WAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACD;;AAEDQ,EAAAA,uBAAuB,CAACT,QAAD,EAAWC,QAAX,EAAqB;AAC1C;AACA;AACAS,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4B,KAAKP,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACD;;AAEDY,EAAAA,6BAA6B,CAACb,QAAD,EAAUc,KAAV,EAAgB;AAC3CJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACD;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB,WAAO,YAAYA,KAAnB;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACPN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACD;;AAEDP,EAAAA,sBAAsB,GAAG;AACvB,QAAIZ,QAAQ,GAAG,UAAf;AACA,QAAIC,QAAQ,GAAG,UAAf;AAEA,QAAIqB,eAAe,GAAG,WAAWf,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAJ,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACzBQ,QAAAA,MAAM,CAACvB,OAAP,CAAeC,aAAf,GAA+BkB,eAA/B;AACD;;AACD,aAAOI,MAAP;AACD,KALD;AAMD;;AA/DyB;;AAkE5B,eAAe,IAAI5B,qBAAJ,EAAf","sourcesContent":["import Axios from \"axios\";\n\nclass AuthenticationService {\n\n\n  executeBasicAuthenticationService(username, password) {\n    return Axios.get(\"http://localhost:8080/basicauth\", {\n      headers: { authorization: this.createBasicAuthToken(username, password) },\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return Axios.get(\"http://localhost:8080/basicauth\", {\n    \n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    // let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    // console.log(\"registerSuccessfulLogin\");\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username,token){\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(this.createJWTToken(token))\n  }\n\n  createJWTToken(token) {\n    return \"Bearer \" + token\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'asmithjr'\n    let password = 'icandoit'\n\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n    Axios.interceptors.request.use((config) => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n      return config;\n    });\n  }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}