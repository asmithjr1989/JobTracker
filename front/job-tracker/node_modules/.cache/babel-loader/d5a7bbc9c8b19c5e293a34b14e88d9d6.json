{"ast":null,"code":"import Axios from \"axios\";\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return Axios.get('http://localhost:8080/baiscuth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    // let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    // console.log(\"registerSuccessfulLogin\");\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = \"asmithjr\";\n    let password = \"dummy\";\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n    Axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/tony/Desktop/JobTracker/front/job-tracker/src/components/job/AuthenticationService.js"],"names":["Axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","basicAuthHeader","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAE1BC,EAAAA,iCAAiC,CAACC,QAAD,EAAUC,QAAV,EAAmB;AACnD,WAAOJ,KAAK,CAACK,GAAN,CAAU,gCAAV,EAA4C;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AAAhB;AAAV,KAA5C,CAAP;AACA;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAUC,QAAV,EAAmB;AACrC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACD;;AAGDO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AAC3C;AAEA;AACCQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CV,QAA5C;AACA,SAAKW,sBAAL,CAA4BC,eAA5B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACPJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACD;;AAEDL,EAAAA,sBAAsB,GAAG;AACvB,QAAIX,QAAQ,GAAG,UAAf;AACA,QAAIC,QAAQ,GAAG,OAAf;AAEA,QAAIW,eAAe,GAAG,WAAWN,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAjC;AAEAJ,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACzBO,QAAAA,MAAM,CAACnB,OAAP,CAAeC,aAAf,GAA+BQ,eAA/B;AACD;;AACD,aAAOU,MAAP;AACD,KALD;AAMD;;AA/CyB;;AAkD5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import Axios from \"axios\";\n\nclass AuthenticationService {\n\n  executeBasicAuthenticationService(username,password){\n   return Axios.get('http://localhost:8080/baiscuth', {headers: {authorization: this.createBasicAuthToken(username,password) }})   \n  }\n\n  createBasicAuthToken(username,password){\n    return \"Basic \" + window.btoa(username + \":\" + password);\n  }\n    \n\n  registerSuccessfulLogin(username, password) {\n   // let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n   // console.log(\"registerSuccessfulLogin\");\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem(\"authenticatedUser\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = \"asmithjr\";\n    let password = \"dummy\";\n\n    let basicAuthHeader = \"Basic \" + window.btoa(username + \":\" + password);\n\n    Axios.interceptors.request.use((config) => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n      return config;\n    });\n  }\n}\n\nexport default new AuthenticationService();\n"]},"metadata":{},"sourceType":"module"}